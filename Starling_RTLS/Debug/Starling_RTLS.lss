
Starling_RTLS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  0040073c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000040  2000043c  00400b78  0002043c  2**2
                  ALLOC
  3 .stack        00003004  2000047c  00400bb8  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  6 .debug_info   000067b1  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001016  00000000  00000000  00026c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000300  00000000  00000000  00027c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000002c0  00000000  00000000  00027f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000eb0f  00000000  00000000  00028246  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004be4  00000000  00000000  00036d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000459dd  00000000  00000000  0003b939  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000750  00000000  00000000  00081318  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e66  00000000  00000000  00081a68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 34 00 20 fd 02 40 00 f9 02 40 00 f9 02 40 00     .4. ..@...@...@.
  400010:	f9 02 40 00 f9 02 40 00 f9 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f9 02 40 00 f9 02 40 00 00 00 00 00 f9 02 40 00     ..@...@.......@.
  40003c:	f9 02 40 00 f9 02 40 00 f9 02 40 00 f9 02 40 00     ..@...@...@...@.
  40004c:	f9 02 40 00 f9 02 40 00 f9 02 40 00 f9 02 40 00     ..@...@...@...@.
  40005c:	00 00 00 00 f9 02 40 00 f9 02 40 00 00 00 00 00     ......@...@.....
  40006c:	f9 02 40 00 f9 02 40 00 00 00 00 00 f9 02 40 00     ..@...@.......@.
	...
  40008c:	f9 02 40 00 f9 02 40 00 f9 02 40 00 f9 02 40 00     ..@...@...@...@.
  40009c:	f9 02 40 00 f9 02 40 00 f9 02 40 00 00 00 00 00     ..@...@...@.....
	...
  4000b4:	f9 02 40 00 00 00 00 00 f9 02 40 00 f9 02 40 00     ..@.......@...@.
  4000c4:	f9 02 40 00 f9 02 40 00                             ..@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	0040073c 	.word	0x0040073c

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	0040073c 	.word	0x0040073c
  40012c:	20000440 	.word	0x20000440
  400130:	0040073c 	.word	0x0040073c
  400134:	00000000 	.word	0x00000000

00400138 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400138:	b508      	push	{r3, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40013a:	480e      	ldr	r0, [pc, #56]	; (400174 <sysclk_init+0x3c>)
  40013c:	4b0e      	ldr	r3, [pc, #56]	; (400178 <sysclk_init+0x40>)
  40013e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400140:	213e      	movs	r1, #62	; 0x3e
  400142:	2001      	movs	r0, #1
  400144:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x44>)
  400146:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400148:	4b0d      	ldr	r3, [pc, #52]	; (400180 <sysclk_init+0x48>)
  40014a:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40014c:	2800      	cmp	r0, #0
  40014e:	d0fb      	beq.n	400148 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400150:	4b0c      	ldr	r3, [pc, #48]	; (400184 <sysclk_init+0x4c>)
  400152:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400154:	4a0c      	ldr	r2, [pc, #48]	; (400188 <sysclk_init+0x50>)
  400156:	4b0d      	ldr	r3, [pc, #52]	; (40018c <sysclk_init+0x54>)
  400158:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40015a:	4b0d      	ldr	r3, [pc, #52]	; (400190 <sysclk_init+0x58>)
  40015c:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40015e:	2800      	cmp	r0, #0
  400160:	d0fb      	beq.n	40015a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400162:	2010      	movs	r0, #16
  400164:	4b0b      	ldr	r3, [pc, #44]	; (400194 <sysclk_init+0x5c>)
  400166:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400168:	4b0b      	ldr	r3, [pc, #44]	; (400198 <sysclk_init+0x60>)
  40016a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40016c:	4801      	ldr	r0, [pc, #4]	; (400174 <sysclk_init+0x3c>)
  40016e:	4b02      	ldr	r3, [pc, #8]	; (400178 <sysclk_init+0x40>)
  400170:	4798      	blx	r3
  400172:	bd08      	pop	{r3, pc}
  400174:	07270e00 	.word	0x07270e00
  400178:	004004c5 	.word	0x004004c5
  40017c:	004001f1 	.word	0x004001f1
  400180:	00400245 	.word	0x00400245
  400184:	00400255 	.word	0x00400255
  400188:	200b3f01 	.word	0x200b3f01
  40018c:	400e0400 	.word	0x400e0400
  400190:	00400265 	.word	0x00400265
  400194:	0040019d 	.word	0x0040019d
  400198:	00400399 	.word	0x00400399

0040019c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40019c:	4a13      	ldr	r2, [pc, #76]	; (4001ec <pmc_switch_mck_to_pllack+0x50>)
  40019e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4001a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4001a4:	4318      	orrs	r0, r3
  4001a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4001ac:	4a0f      	ldr	r2, [pc, #60]	; (4001ec <pmc_switch_mck_to_pllack+0x50>)
  4001ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4001b0:	f012 0f08 	tst.w	r2, #8
  4001b4:	d102      	bne.n	4001bc <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4001b6:	b1a3      	cbz	r3, 4001e2 <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  4001b8:	3b01      	subs	r3, #1
  4001ba:	e7f7      	b.n	4001ac <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4001bc:	4a0b      	ldr	r2, [pc, #44]	; (4001ec <pmc_switch_mck_to_pllack+0x50>)
  4001be:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4001c0:	f023 0303 	bic.w	r3, r3, #3
  4001c4:	f043 0302 	orr.w	r3, r3, #2
  4001c8:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4001ce:	4a07      	ldr	r2, [pc, #28]	; (4001ec <pmc_switch_mck_to_pllack+0x50>)
  4001d0:	6e92      	ldr	r2, [r2, #104]	; 0x68
  4001d2:	f012 0f08 	tst.w	r2, #8
  4001d6:	d102      	bne.n	4001de <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4001d8:	b12b      	cbz	r3, 4001e6 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  4001da:	3b01      	subs	r3, #1
  4001dc:	e7f7      	b.n	4001ce <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  4001de:	2000      	movs	r0, #0
  4001e0:	4770      	bx	lr
			return 1;
  4001e2:	2001      	movs	r0, #1
  4001e4:	4770      	bx	lr
			return 1;
  4001e6:	2001      	movs	r0, #1
}
  4001e8:	4770      	bx	lr
  4001ea:	bf00      	nop
  4001ec:	400e0400 	.word	0x400e0400

004001f0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4001f0:	b9d0      	cbnz	r0, 400228 <pmc_switch_mainck_to_xtal+0x38>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4001f2:	4a11      	ldr	r2, [pc, #68]	; (400238 <pmc_switch_mainck_to_xtal+0x48>)
  4001f4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4001f6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4001fa:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4001fe:	0209      	lsls	r1, r1, #8
  400200:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400202:	430b      	orrs	r3, r1
  400204:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400208:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40020c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40020e:	4b0a      	ldr	r3, [pc, #40]	; (400238 <pmc_switch_mainck_to_xtal+0x48>)
  400210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400212:	f013 0f01 	tst.w	r3, #1
  400216:	d0fa      	beq.n	40020e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400218:	4a07      	ldr	r2, [pc, #28]	; (400238 <pmc_switch_mainck_to_xtal+0x48>)
  40021a:	6a13      	ldr	r3, [r2, #32]
  40021c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400224:	6213      	str	r3, [r2, #32]
  400226:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400228:	4903      	ldr	r1, [pc, #12]	; (400238 <pmc_switch_mainck_to_xtal+0x48>)
  40022a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40022c:	4a03      	ldr	r2, [pc, #12]	; (40023c <pmc_switch_mainck_to_xtal+0x4c>)
  40022e:	401a      	ands	r2, r3
  400230:	4b03      	ldr	r3, [pc, #12]	; (400240 <pmc_switch_mainck_to_xtal+0x50>)
  400232:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400234:	620b      	str	r3, [r1, #32]
  400236:	4770      	bx	lr
  400238:	400e0400 	.word	0x400e0400
  40023c:	fec8fffc 	.word	0xfec8fffc
  400240:	01370002 	.word	0x01370002

00400244 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400244:	4b02      	ldr	r3, [pc, #8]	; (400250 <pmc_osc_is_ready_mainck+0xc>)
  400246:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400248:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40024c:	4770      	bx	lr
  40024e:	bf00      	nop
  400250:	400e0400 	.word	0x400e0400

00400254 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400254:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400258:	4b01      	ldr	r3, [pc, #4]	; (400260 <pmc_disable_pllack+0xc>)
  40025a:	629a      	str	r2, [r3, #40]	; 0x28
  40025c:	4770      	bx	lr
  40025e:	bf00      	nop
  400260:	400e0400 	.word	0x400e0400

00400264 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400264:	4b02      	ldr	r3, [pc, #8]	; (400270 <pmc_is_locked_pllack+0xc>)
  400266:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400268:	f000 0002 	and.w	r0, r0, #2
  40026c:	4770      	bx	lr
  40026e:	bf00      	nop
  400270:	400e0400 	.word	0x400e0400

00400274 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  400274:	2822      	cmp	r0, #34	; 0x22
  400276:	d81e      	bhi.n	4002b6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400278:	281f      	cmp	r0, #31
  40027a:	d80c      	bhi.n	400296 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <pmc_enable_periph_clk+0x50>)
  40027e:	699a      	ldr	r2, [r3, #24]
  400280:	2301      	movs	r3, #1
  400282:	4083      	lsls	r3, r0
  400284:	4393      	bics	r3, r2
  400286:	d018      	beq.n	4002ba <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400288:	2301      	movs	r3, #1
  40028a:	fa03 f000 	lsl.w	r0, r3, r0
  40028e:	4b0d      	ldr	r3, [pc, #52]	; (4002c4 <pmc_enable_periph_clk+0x50>)
  400290:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400292:	2000      	movs	r0, #0
  400294:	4770      	bx	lr
		ul_id -= 32;
  400296:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400298:	4b0a      	ldr	r3, [pc, #40]	; (4002c4 <pmc_enable_periph_clk+0x50>)
  40029a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40029e:	2301      	movs	r3, #1
  4002a0:	4083      	lsls	r3, r0
  4002a2:	4393      	bics	r3, r2
  4002a4:	d00b      	beq.n	4002be <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4002a6:	2301      	movs	r3, #1
  4002a8:	fa03 f000 	lsl.w	r0, r3, r0
  4002ac:	4b05      	ldr	r3, [pc, #20]	; (4002c4 <pmc_enable_periph_clk+0x50>)
  4002ae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4002b2:	2000      	movs	r0, #0
  4002b4:	4770      	bx	lr
		return 1;
  4002b6:	2001      	movs	r0, #1
  4002b8:	4770      	bx	lr
	return 0;
  4002ba:	2000      	movs	r0, #0
  4002bc:	4770      	bx	lr
  4002be:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4002c0:	4770      	bx	lr
  4002c2:	bf00      	nop
  4002c4:	400e0400 	.word	0x400e0400

004002c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4002c8:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002ca:	200b      	movs	r0, #11
  4002cc:	4c08      	ldr	r4, [pc, #32]	; (4002f0 <board_init+0x28>)
  4002ce:	47a0      	blx	r4
  4002d0:	200c      	movs	r0, #12
  4002d2:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002d4:	4b07      	ldr	r3, [pc, #28]	; (4002f4 <board_init+0x2c>)
  4002d6:	2220      	movs	r2, #32
  4002d8:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002de:	2202      	movs	r2, #2
  4002e0:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4002e6:	2204      	movs	r2, #4
  4002e8:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4002ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  4002ee:	bd10      	pop	{r4, pc}
  4002f0:	00400275 	.word	0x00400275
  4002f4:	400e0e00 	.word	0x400e0e00

004002f8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002f8:	e7fe      	b.n	4002f8 <Dummy_Handler>
	...

004002fc <Reset_Handler>:
{
  4002fc:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  4002fe:	4b19      	ldr	r3, [pc, #100]	; (400364 <Reset_Handler+0x68>)
  400300:	4a19      	ldr	r2, [pc, #100]	; (400368 <Reset_Handler+0x6c>)
  400302:	429a      	cmp	r2, r3
  400304:	d814      	bhi.n	400330 <Reset_Handler+0x34>
	} else if (pSrc < pDest) {
  400306:	4b17      	ldr	r3, [pc, #92]	; (400364 <Reset_Handler+0x68>)
  400308:	4a17      	ldr	r2, [pc, #92]	; (400368 <Reset_Handler+0x6c>)
  40030a:	429a      	cmp	r2, r3
  40030c:	d20d      	bcs.n	40032a <Reset_Handler+0x2e>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  40030e:	4a17      	ldr	r2, [pc, #92]	; (40036c <Reset_Handler+0x70>)
  400310:	1ad1      	subs	r1, r2, r3
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400312:	4b15      	ldr	r3, [pc, #84]	; (400368 <Reset_Handler+0x6c>)
  400314:	440b      	add	r3, r1
  400316:	3b04      	subs	r3, #4
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  400318:	3a04      	subs	r2, #4
		for (;nb_bytes;nb_bytes -= 4) {
  40031a:	e011      	b.n	400340 <Reset_Handler+0x44>
			*pDest++ = *pSrc++;
  40031c:	6811      	ldr	r1, [r2, #0]
  40031e:	6019      	str	r1, [r3, #0]
  400320:	3304      	adds	r3, #4
  400322:	3204      	adds	r2, #4
		for (; pDest < &_erelocate;) {
  400324:	4911      	ldr	r1, [pc, #68]	; (40036c <Reset_Handler+0x70>)
  400326:	428b      	cmp	r3, r1
  400328:	d3f8      	bcc.n	40031c <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40032a:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  40032c:	4b10      	ldr	r3, [pc, #64]	; (400370 <Reset_Handler+0x74>)
  40032e:	e00d      	b.n	40034c <Reset_Handler+0x50>
  400330:	4b0c      	ldr	r3, [pc, #48]	; (400364 <Reset_Handler+0x68>)
  400332:	4a0d      	ldr	r2, [pc, #52]	; (400368 <Reset_Handler+0x6c>)
  400334:	e7f6      	b.n	400324 <Reset_Handler+0x28>
			*pDest-- = *pSrc--;
  400336:	6818      	ldr	r0, [r3, #0]
  400338:	6010      	str	r0, [r2, #0]
		for (;nb_bytes;nb_bytes -= 4) {
  40033a:	3904      	subs	r1, #4
			*pDest-- = *pSrc--;
  40033c:	3a04      	subs	r2, #4
  40033e:	3b04      	subs	r3, #4
		for (;nb_bytes;nb_bytes -= 4) {
  400340:	2900      	cmp	r1, #0
  400342:	d1f8      	bne.n	400336 <Reset_Handler+0x3a>
  400344:	e7f1      	b.n	40032a <Reset_Handler+0x2e>
		*pDest++ = 0;
  400346:	2200      	movs	r2, #0
  400348:	601a      	str	r2, [r3, #0]
  40034a:	3304      	adds	r3, #4
	for (pDest = &_szero; pDest < &_ezero;) {
  40034c:	4a09      	ldr	r2, [pc, #36]	; (400374 <Reset_Handler+0x78>)
  40034e:	4293      	cmp	r3, r2
  400350:	d3f9      	bcc.n	400346 <Reset_Handler+0x4a>
	SCB->VTOR = ((uint32_t) pSrc);
  400352:	4b09      	ldr	r3, [pc, #36]	; (400378 <Reset_Handler+0x7c>)
  400354:	4a09      	ldr	r2, [pc, #36]	; (40037c <Reset_Handler+0x80>)
  400356:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400358:	4b09      	ldr	r3, [pc, #36]	; (400380 <Reset_Handler+0x84>)
  40035a:	4798      	blx	r3
	main();
  40035c:	4b09      	ldr	r3, [pc, #36]	; (400384 <Reset_Handler+0x88>)
  40035e:	4798      	blx	r3
  400360:	e7fe      	b.n	400360 <Reset_Handler+0x64>
  400362:	bf00      	nop
  400364:	20000000 	.word	0x20000000
  400368:	0040073c 	.word	0x0040073c
  40036c:	2000043c 	.word	0x2000043c
  400370:	2000043c 	.word	0x2000043c
  400374:	2000047c 	.word	0x2000047c
  400378:	e000ed00 	.word	0xe000ed00
  40037c:	00400000 	.word	0x00400000
  400380:	004005a5 	.word	0x004005a5
  400384:	00400541 	.word	0x00400541

00400388 <SystemInit>:
	 * For SAM4S, the internal 4MHz fast RC oscillator is the default clock
	 * selected at system reset state.
	 */

	/* Set FWS according to default clock configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400388:	4a01      	ldr	r2, [pc, #4]	; (400390 <SystemInit+0x8>)
  40038a:	4b02      	ldr	r3, [pc, #8]	; (400394 <SystemInit+0xc>)
  40038c:	601a      	str	r2, [r3, #0]
  40038e:	4770      	bx	lr
  400390:	04000100 	.word	0x04000100
  400394:	400e0a00 	.word	0x400e0a00

00400398 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400398:	4b43      	ldr	r3, [pc, #268]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  40039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40039c:	f003 0303 	and.w	r3, r3, #3
  4003a0:	2b03      	cmp	r3, #3
  4003a2:	d849      	bhi.n	400438 <SystemCoreClockUpdate+0xa0>
  4003a4:	e8df f003 	tbb	[pc, r3]
  4003a8:	2d2d1102 	.word	0x2d2d1102
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4003ac:	4b3f      	ldr	r3, [pc, #252]	; (4004ac <SystemCoreClockUpdate+0x114>)
  4003ae:	695b      	ldr	r3, [r3, #20]
  4003b0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4003b4:	d004      	beq.n	4003c0 <SystemCoreClockUpdate+0x28>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4003b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4003ba:	4b3d      	ldr	r3, [pc, #244]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  4003bc:	601a      	str	r2, [r3, #0]
  4003be:	e03b      	b.n	400438 <SystemCoreClockUpdate+0xa0>
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4003c0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4003c4:	4b3a      	ldr	r3, [pc, #232]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  4003c6:	601a      	str	r2, [r3, #0]
  4003c8:	e036      	b.n	400438 <SystemCoreClockUpdate+0xa0>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4003ca:	4b37      	ldr	r3, [pc, #220]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  4003cc:	6a1b      	ldr	r3, [r3, #32]
  4003ce:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4003d2:	d003      	beq.n	4003dc <SystemCoreClockUpdate+0x44>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4003d4:	4a37      	ldr	r2, [pc, #220]	; (4004b4 <SystemCoreClockUpdate+0x11c>)
  4003d6:	4b36      	ldr	r3, [pc, #216]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  4003d8:	601a      	str	r2, [r3, #0]
  4003da:	e02d      	b.n	400438 <SystemCoreClockUpdate+0xa0>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4003dc:	4a36      	ldr	r2, [pc, #216]	; (4004b8 <SystemCoreClockUpdate+0x120>)
  4003de:	4b34      	ldr	r3, [pc, #208]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  4003e0:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4003e2:	4b31      	ldr	r3, [pc, #196]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  4003e4:	6a1b      	ldr	r3, [r3, #32]
  4003e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4003ea:	2b10      	cmp	r3, #16
  4003ec:	d005      	beq.n	4003fa <SystemCoreClockUpdate+0x62>
  4003ee:	2b20      	cmp	r3, #32
  4003f0:	d122      	bne.n	400438 <SystemCoreClockUpdate+0xa0>
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4003f2:	4a30      	ldr	r2, [pc, #192]	; (4004b4 <SystemCoreClockUpdate+0x11c>)
  4003f4:	4b2e      	ldr	r3, [pc, #184]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  4003f6:	601a      	str	r2, [r3, #0]
			break;
  4003f8:	e01e      	b.n	400438 <SystemCoreClockUpdate+0xa0>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4003fa:	4a30      	ldr	r2, [pc, #192]	; (4004bc <SystemCoreClockUpdate+0x124>)
  4003fc:	4b2c      	ldr	r3, [pc, #176]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  4003fe:	601a      	str	r2, [r3, #0]
			break;
  400400:	e01a      	b.n	400438 <SystemCoreClockUpdate+0xa0>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400402:	4b29      	ldr	r3, [pc, #164]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  400404:	6a1b      	ldr	r3, [r3, #32]
  400406:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40040a:	d024      	beq.n	400456 <SystemCoreClockUpdate+0xbe>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40040c:	4a29      	ldr	r2, [pc, #164]	; (4004b4 <SystemCoreClockUpdate+0x11c>)
  40040e:	4b28      	ldr	r3, [pc, #160]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  400410:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400412:	4b25      	ldr	r3, [pc, #148]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  400414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400416:	f003 0303 	and.w	r3, r3, #3
  40041a:	2b02      	cmp	r3, #2
  40041c:	d02e      	beq.n	40047c <SystemCoreClockUpdate+0xe4>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40041e:	4822      	ldr	r0, [pc, #136]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  400420:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400422:	f3c2 420a 	ubfx	r2, r2, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400426:	4922      	ldr	r1, [pc, #136]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  400428:	680b      	ldr	r3, [r1, #0]
  40042a:	fb02 3303 	mla	r3, r2, r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40042e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  400430:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400432:	fbb3 f3f2 	udiv	r3, r3, r2
  400436:	600b      	str	r3, [r1, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400438:	4b1b      	ldr	r3, [pc, #108]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  40043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40043c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400440:	2b70      	cmp	r3, #112	; 0x70
  400442:	d029      	beq.n	400498 <SystemCoreClockUpdate+0x100>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400444:	4b18      	ldr	r3, [pc, #96]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  400446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400448:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  40044c:	4918      	ldr	r1, [pc, #96]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  40044e:	680b      	ldr	r3, [r1, #0]
  400450:	40d3      	lsrs	r3, r2
  400452:	600b      	str	r3, [r1, #0]
  400454:	4770      	bx	lr
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400456:	4a18      	ldr	r2, [pc, #96]	; (4004b8 <SystemCoreClockUpdate+0x120>)
  400458:	4b15      	ldr	r3, [pc, #84]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  40045a:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  40045c:	4b12      	ldr	r3, [pc, #72]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  40045e:	6a1b      	ldr	r3, [r3, #32]
  400460:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400464:	2b10      	cmp	r3, #16
  400466:	d005      	beq.n	400474 <SystemCoreClockUpdate+0xdc>
  400468:	2b20      	cmp	r3, #32
  40046a:	d1d2      	bne.n	400412 <SystemCoreClockUpdate+0x7a>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40046c:	4a11      	ldr	r2, [pc, #68]	; (4004b4 <SystemCoreClockUpdate+0x11c>)
  40046e:	4b10      	ldr	r3, [pc, #64]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  400470:	601a      	str	r2, [r3, #0]
					break;
  400472:	e7ce      	b.n	400412 <SystemCoreClockUpdate+0x7a>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400474:	4a11      	ldr	r2, [pc, #68]	; (4004bc <SystemCoreClockUpdate+0x124>)
  400476:	4b0e      	ldr	r3, [pc, #56]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  400478:	601a      	str	r2, [r3, #0]
					break;
  40047a:	e7ca      	b.n	400412 <SystemCoreClockUpdate+0x7a>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40047c:	480a      	ldr	r0, [pc, #40]	; (4004a8 <SystemCoreClockUpdate+0x110>)
  40047e:	6a82      	ldr	r2, [r0, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  400480:	f3c2 420a 	ubfx	r2, r2, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400484:	490a      	ldr	r1, [pc, #40]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  400486:	680b      	ldr	r3, [r1, #0]
  400488:	fb02 3303 	mla	r3, r2, r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40048c:	6a82      	ldr	r2, [r0, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40048e:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400490:	fbb3 f3f2 	udiv	r3, r3, r2
  400494:	600b      	str	r3, [r1, #0]
  400496:	e7cf      	b.n	400438 <SystemCoreClockUpdate+0xa0>
		SystemCoreClock /= 3U;
  400498:	4a05      	ldr	r2, [pc, #20]	; (4004b0 <SystemCoreClockUpdate+0x118>)
  40049a:	6813      	ldr	r3, [r2, #0]
  40049c:	4908      	ldr	r1, [pc, #32]	; (4004c0 <SystemCoreClockUpdate+0x128>)
  40049e:	fba1 1303 	umull	r1, r3, r1, r3
  4004a2:	085b      	lsrs	r3, r3, #1
  4004a4:	6013      	str	r3, [r2, #0]
  4004a6:	4770      	bx	lr
  4004a8:	400e0400 	.word	0x400e0400
  4004ac:	400e1410 	.word	0x400e1410
  4004b0:	2000000c 	.word	0x2000000c
  4004b4:	00b71b00 	.word	0x00b71b00
  4004b8:	003d0900 	.word	0x003d0900
  4004bc:	007a1200 	.word	0x007a1200
  4004c0:	aaaaaaab 	.word	0xaaaaaaab

004004c4 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4004c4:	4b14      	ldr	r3, [pc, #80]	; (400518 <system_init_flash+0x54>)
  4004c6:	4298      	cmp	r0, r3
  4004c8:	d90f      	bls.n	4004ea <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  4004ca:	4b14      	ldr	r3, [pc, #80]	; (40051c <system_init_flash+0x58>)
  4004cc:	4298      	cmp	r0, r3
  4004ce:	d911      	bls.n	4004f4 <system_init_flash+0x30>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  4004d0:	4b13      	ldr	r3, [pc, #76]	; (400520 <system_init_flash+0x5c>)
  4004d2:	4298      	cmp	r0, r3
  4004d4:	d912      	bls.n	4004fc <system_init_flash+0x38>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  4004d6:	4b13      	ldr	r3, [pc, #76]	; (400524 <system_init_flash+0x60>)
  4004d8:	4298      	cmp	r0, r3
  4004da:	d913      	bls.n	400504 <system_init_flash+0x40>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  4004dc:	4b12      	ldr	r3, [pc, #72]	; (400528 <system_init_flash+0x64>)
  4004de:	4298      	cmp	r0, r3
  4004e0:	d914      	bls.n	40050c <system_init_flash+0x48>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4004e2:	4a12      	ldr	r2, [pc, #72]	; (40052c <system_init_flash+0x68>)
  4004e4:	4b12      	ldr	r3, [pc, #72]	; (400530 <system_init_flash+0x6c>)
  4004e6:	601a      	str	r2, [r3, #0]
  4004e8:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4004ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4004ee:	4b10      	ldr	r3, [pc, #64]	; (400530 <system_init_flash+0x6c>)
  4004f0:	601a      	str	r2, [r3, #0]
  4004f2:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4004f4:	4a0f      	ldr	r2, [pc, #60]	; (400534 <system_init_flash+0x70>)
  4004f6:	4b0e      	ldr	r3, [pc, #56]	; (400530 <system_init_flash+0x6c>)
  4004f8:	601a      	str	r2, [r3, #0]
  4004fa:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4004fc:	4a0e      	ldr	r2, [pc, #56]	; (400538 <system_init_flash+0x74>)
  4004fe:	4b0c      	ldr	r3, [pc, #48]	; (400530 <system_init_flash+0x6c>)
  400500:	601a      	str	r2, [r3, #0]
  400502:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400504:	4a0d      	ldr	r2, [pc, #52]	; (40053c <system_init_flash+0x78>)
  400506:	4b0a      	ldr	r3, [pc, #40]	; (400530 <system_init_flash+0x6c>)
  400508:	601a      	str	r2, [r3, #0]
  40050a:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40050c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400510:	4b07      	ldr	r3, [pc, #28]	; (400530 <system_init_flash+0x6c>)
  400512:	601a      	str	r2, [r3, #0]
  400514:	4770      	bx	lr
  400516:	bf00      	nop
  400518:	01312cff 	.word	0x01312cff
  40051c:	026259ff 	.word	0x026259ff
  400520:	039386ff 	.word	0x039386ff
  400524:	04c4b3ff 	.word	0x04c4b3ff
  400528:	05f5e0ff 	.word	0x05f5e0ff
  40052c:	04000500 	.word	0x04000500
  400530:	400e0a00 	.word	0x400e0a00
  400534:	04000100 	.word	0x04000100
  400538:	04000200 	.word	0x04000200
  40053c:	04000300 	.word	0x04000300

00400540 <main>:
#include <asf.h>
#include "conf_clock.h"
#include "conf_board.h"

int main (void)
{
  400540:	b580      	push	{r7, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	SystemInit();
  400542:	4b12      	ldr	r3, [pc, #72]	; (40058c <main+0x4c>)
  400544:	4798      	blx	r3
	board_init();
  400546:	4b12      	ldr	r3, [pc, #72]	; (400590 <main+0x50>)
  400548:	4798      	blx	r3
	sysclk_init();
  40054a:	4b12      	ldr	r3, [pc, #72]	; (400594 <main+0x54>)
  40054c:	4798      	blx	r3
  40054e:	e005      	b.n	40055c <main+0x1c>
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  400550:	2202      	movs	r2, #2
  400552:	4b11      	ldr	r3, [pc, #68]	; (400598 <main+0x58>)
  400554:	631a      	str	r2, [r3, #48]	; 0x30
		delay_ms(500);
		ioport_set_pin_level(LEDY, true);
		ioport_set_pin_level(LEDR, false);
		delay_ms(500);
		ioport_toggle_pin_level(LEDG);
		delay_ms(500);
  400556:	4811      	ldr	r0, [pc, #68]	; (40059c <main+0x5c>)
  400558:	4b11      	ldr	r3, [pc, #68]	; (4005a0 <main+0x60>)
  40055a:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40055c:	4c0e      	ldr	r4, [pc, #56]	; (400598 <main+0x58>)
  40055e:	f04f 0820 	mov.w	r8, #32
  400562:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400566:	2704      	movs	r7, #4
  400568:	6327      	str	r7, [r4, #48]	; 0x30
		delay_ms(500);
  40056a:	4e0c      	ldr	r6, [pc, #48]	; (40059c <main+0x5c>)
  40056c:	4630      	mov	r0, r6
  40056e:	4d0c      	ldr	r5, [pc, #48]	; (4005a0 <main+0x60>)
  400570:	47a8      	blx	r5
  400572:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400576:	6367      	str	r7, [r4, #52]	; 0x34
		delay_ms(500);
  400578:	4630      	mov	r0, r6
  40057a:	47a8      	blx	r5
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40057c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40057e:	f013 0f02 	tst.w	r3, #2
  400582:	d0e5      	beq.n	400550 <main+0x10>
		port->PIO_CODR = mask;
  400584:	2202      	movs	r2, #2
  400586:	6362      	str	r2, [r4, #52]	; 0x34
  400588:	e7e5      	b.n	400556 <main+0x16>
  40058a:	bf00      	nop
  40058c:	00400389 	.word	0x00400389
  400590:	004002c9 	.word	0x004002c9
  400594:	00400139 	.word	0x00400139
  400598:	400e0e00 	.word	0x400e0e00
  40059c:	00416513 	.word	0x00416513
  4005a0:	20000001 	.word	0x20000001

004005a4 <__libc_init_array>:
  4005a4:	b570      	push	{r4, r5, r6, lr}
  4005a6:	4e0f      	ldr	r6, [pc, #60]	; (4005e4 <__libc_init_array+0x40>)
  4005a8:	4d0f      	ldr	r5, [pc, #60]	; (4005e8 <__libc_init_array+0x44>)
  4005aa:	1b76      	subs	r6, r6, r5
  4005ac:	10b6      	asrs	r6, r6, #2
  4005ae:	bf18      	it	ne
  4005b0:	2400      	movne	r4, #0
  4005b2:	d005      	beq.n	4005c0 <__libc_init_array+0x1c>
  4005b4:	3401      	adds	r4, #1
  4005b6:	f855 3b04 	ldr.w	r3, [r5], #4
  4005ba:	4798      	blx	r3
  4005bc:	42a6      	cmp	r6, r4
  4005be:	d1f9      	bne.n	4005b4 <__libc_init_array+0x10>
  4005c0:	4e0a      	ldr	r6, [pc, #40]	; (4005ec <__libc_init_array+0x48>)
  4005c2:	4d0b      	ldr	r5, [pc, #44]	; (4005f0 <__libc_init_array+0x4c>)
  4005c4:	1b76      	subs	r6, r6, r5
  4005c6:	f000 f8a7 	bl	400718 <_init>
  4005ca:	10b6      	asrs	r6, r6, #2
  4005cc:	bf18      	it	ne
  4005ce:	2400      	movne	r4, #0
  4005d0:	d006      	beq.n	4005e0 <__libc_init_array+0x3c>
  4005d2:	3401      	adds	r4, #1
  4005d4:	f855 3b04 	ldr.w	r3, [r5], #4
  4005d8:	4798      	blx	r3
  4005da:	42a6      	cmp	r6, r4
  4005dc:	d1f9      	bne.n	4005d2 <__libc_init_array+0x2e>
  4005de:	bd70      	pop	{r4, r5, r6, pc}
  4005e0:	bd70      	pop	{r4, r5, r6, pc}
  4005e2:	bf00      	nop
  4005e4:	00400724 	.word	0x00400724
  4005e8:	00400724 	.word	0x00400724
  4005ec:	0040072c 	.word	0x0040072c
  4005f0:	00400724 	.word	0x00400724

004005f4 <register_fini>:
  4005f4:	4b02      	ldr	r3, [pc, #8]	; (400600 <register_fini+0xc>)
  4005f6:	b113      	cbz	r3, 4005fe <register_fini+0xa>
  4005f8:	4802      	ldr	r0, [pc, #8]	; (400604 <register_fini+0x10>)
  4005fa:	f000 b805 	b.w	400608 <atexit>
  4005fe:	4770      	bx	lr
  400600:	00000000 	.word	0x00000000
  400604:	00400615 	.word	0x00400615

00400608 <atexit>:
  400608:	2300      	movs	r3, #0
  40060a:	4601      	mov	r1, r0
  40060c:	461a      	mov	r2, r3
  40060e:	4618      	mov	r0, r3
  400610:	f000 b81e 	b.w	400650 <__register_exitproc>

00400614 <__libc_fini_array>:
  400614:	b538      	push	{r3, r4, r5, lr}
  400616:	4c0a      	ldr	r4, [pc, #40]	; (400640 <__libc_fini_array+0x2c>)
  400618:	4d0a      	ldr	r5, [pc, #40]	; (400644 <__libc_fini_array+0x30>)
  40061a:	1b64      	subs	r4, r4, r5
  40061c:	10a4      	asrs	r4, r4, #2
  40061e:	d00a      	beq.n	400636 <__libc_fini_array+0x22>
  400620:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400624:	3b01      	subs	r3, #1
  400626:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40062a:	3c01      	subs	r4, #1
  40062c:	f855 3904 	ldr.w	r3, [r5], #-4
  400630:	4798      	blx	r3
  400632:	2c00      	cmp	r4, #0
  400634:	d1f9      	bne.n	40062a <__libc_fini_array+0x16>
  400636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40063a:	f000 b877 	b.w	40072c <_fini>
  40063e:	bf00      	nop
  400640:	0040073c 	.word	0x0040073c
  400644:	00400738 	.word	0x00400738

00400648 <__retarget_lock_acquire_recursive>:
  400648:	4770      	bx	lr
  40064a:	bf00      	nop

0040064c <__retarget_lock_release_recursive>:
  40064c:	4770      	bx	lr
  40064e:	bf00      	nop

00400650 <__register_exitproc>:
  400650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400654:	4d2c      	ldr	r5, [pc, #176]	; (400708 <__register_exitproc+0xb8>)
  400656:	4606      	mov	r6, r0
  400658:	6828      	ldr	r0, [r5, #0]
  40065a:	4698      	mov	r8, r3
  40065c:	460f      	mov	r7, r1
  40065e:	4691      	mov	r9, r2
  400660:	f7ff fff2 	bl	400648 <__retarget_lock_acquire_recursive>
  400664:	4b29      	ldr	r3, [pc, #164]	; (40070c <__register_exitproc+0xbc>)
  400666:	681c      	ldr	r4, [r3, #0]
  400668:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40066c:	2b00      	cmp	r3, #0
  40066e:	d03e      	beq.n	4006ee <__register_exitproc+0x9e>
  400670:	685a      	ldr	r2, [r3, #4]
  400672:	2a1f      	cmp	r2, #31
  400674:	dc1c      	bgt.n	4006b0 <__register_exitproc+0x60>
  400676:	f102 0e01 	add.w	lr, r2, #1
  40067a:	b176      	cbz	r6, 40069a <__register_exitproc+0x4a>
  40067c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400680:	2401      	movs	r4, #1
  400682:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400686:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40068a:	4094      	lsls	r4, r2
  40068c:	4320      	orrs	r0, r4
  40068e:	2e02      	cmp	r6, #2
  400690:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400694:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400698:	d023      	beq.n	4006e2 <__register_exitproc+0x92>
  40069a:	3202      	adds	r2, #2
  40069c:	f8c3 e004 	str.w	lr, [r3, #4]
  4006a0:	6828      	ldr	r0, [r5, #0]
  4006a2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4006a6:	f7ff ffd1 	bl	40064c <__retarget_lock_release_recursive>
  4006aa:	2000      	movs	r0, #0
  4006ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4006b0:	4b17      	ldr	r3, [pc, #92]	; (400710 <__register_exitproc+0xc0>)
  4006b2:	b30b      	cbz	r3, 4006f8 <__register_exitproc+0xa8>
  4006b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4006b8:	f3af 8000 	nop.w
  4006bc:	4603      	mov	r3, r0
  4006be:	b1d8      	cbz	r0, 4006f8 <__register_exitproc+0xa8>
  4006c0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4006c4:	6002      	str	r2, [r0, #0]
  4006c6:	2100      	movs	r1, #0
  4006c8:	6041      	str	r1, [r0, #4]
  4006ca:	460a      	mov	r2, r1
  4006cc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4006d0:	f04f 0e01 	mov.w	lr, #1
  4006d4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4006d8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4006dc:	2e00      	cmp	r6, #0
  4006de:	d0dc      	beq.n	40069a <__register_exitproc+0x4a>
  4006e0:	e7cc      	b.n	40067c <__register_exitproc+0x2c>
  4006e2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4006e6:	430c      	orrs	r4, r1
  4006e8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4006ec:	e7d5      	b.n	40069a <__register_exitproc+0x4a>
  4006ee:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4006f2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4006f6:	e7bb      	b.n	400670 <__register_exitproc+0x20>
  4006f8:	6828      	ldr	r0, [r5, #0]
  4006fa:	f7ff ffa7 	bl	40064c <__retarget_lock_release_recursive>
  4006fe:	f04f 30ff 	mov.w	r0, #4294967295
  400702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400706:	bf00      	nop
  400708:	20000438 	.word	0x20000438
  40070c:	00400714 	.word	0x00400714
  400710:	00000000 	.word	0x00000000

00400714 <_global_impure_ptr>:
  400714:	20000010                                ... 

00400718 <_init>:
  400718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40071a:	bf00      	nop
  40071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40071e:	bc08      	pop	{r3}
  400720:	469e      	mov	lr, r3
  400722:	4770      	bx	lr

00400724 <__init_array_start>:
  400724:	004005f5 	.word	0x004005f5

00400728 <__frame_dummy_init_array_entry>:
  400728:	004000f1                                ..@.

0040072c <_fini>:
  40072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40072e:	bf00      	nop
  400730:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400732:	bc08      	pop	{r3}
  400734:	469e      	mov	lr, r3
  400736:	4770      	bx	lr

00400738 <__fini_array_start>:
  400738:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	0458 2000                                   X.. 
